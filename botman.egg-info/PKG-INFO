Metadata-Version: 2.4
Name: botman
Version: 0.1.0
Summary: Add your description here
Requires-Python: >=3.12
Description-Content-Type: text/markdown
Requires-Dist: openai>=2.3.0
Requires-Dist: opencv-python>=4.12.0.88
Requires-Dist: pillow>=12.0.0
Requires-Dist: playwright>=1.55.0
Requires-Dist: pyautogui>=0.9.54
Requires-Dist: fastmcp>=0.1.0
Requires-Dist: mcp[cli]>=1.17.0
Requires-Dist: openai-agents>=0.1.0

# Botman Browser Agent Kit

`botman` ships a small set of Playwright-powered helpers that are easy to embed in autonomous agents. The codebase now favours clarity over breadth: a single `BrowserAgent` class wraps the Playwright sync API and a FastMCP adapter exposes those helpers as tools.

## Prerequisites

- Python 3.12+
- Playwright browsers (run `uv run playwright install chromium` after syncing dependencies)

## Installation

```bash
uv sync
uv run playwright install chromium  # downloads Chromium the first time
```

## Using the BrowserAgent Directly

```python
from browserbot.agentkit import create_agent

with create_agent(headless=False) as agent:
    meta = agent.navigate("https://example.com")
    print(meta["title"])

    links = agent.list_links("https://example.com")
    for link in links["links"][:5]:
        print(link["text"], link["href"])

    hero_copy = agent.extract_text("https://example.com", "h1")
    print(hero_copy["text"])
```

Every helper opens a fresh browser context, performs the requested action, and closes the context again. If Playwright raises (for example `TimeoutError`), the exception is propagated so you can decide how to handle it.

## Hosting the Tools with FastMCP

The FastMCP wrapper runs the same helpers behind a lightweight STDIO server.

```bash
uv run fastmcp run browserbot/fastmcp_server.py
```

Switch to headed mode before starting the server, if desired:

```python
from browserbot.fastmcp_server import configure_browser_agent

configure_browser_agent(headless=False)
```

### Registered Tools

The MCP surface intentionally mirrors the `BrowserAgent` methods:

- `navigate(url, wait_until="load")`
- `list_links(url, wait_until="load", limit=200, root_selector=None, link_selector=None)`
- `extract_text(url, selector, wait_until="load", timeout_ms=None)`
- `click(url, selector, wait_until="load", timeout_ms=None, post_wait="networkidle")`
- `take_screenshot(url, wait_until="load", selector=None, full_page=True, image_format="png", quality=None)`

Each tool returns the underlying result or a structured error dictionary (`{"error": "...", "operation": "...", "message": "..."}`) when Playwright raises.

### Installing in MCP Clients

```bash
uv run fastmcp install claude-desktop browserbot/fastmcp_server.py --project /path/to/botman
```

Adjust the client target (`claude-desktop`, `claude-code`, `mcp-json`, etc.) and project path as needed.

## Development Notes

- Source lives under `browserbot/`. `agentkit.py` holds the browser helper and `fastmcp_server.py` registers MCP tools.
- The codebase keeps concurrency simple: the FastMCP adapter serialises Playwright access behind a thread lock and executes synchronous Playwright calls on a background thread.
- Additions should follow the same pattern: implement a helper on `BrowserAgent`, document it with a short docstring, then expose it via FastMCP.
